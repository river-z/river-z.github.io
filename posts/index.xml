<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Welcome to river&#39;s hugo site</title>
    <link>https://river-z.github.io/posts/</link>
    <description>Recent content in Posts on Welcome to river&#39;s hugo site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 22 Mar 2023 15:22:37 +0800</lastBuildDate><atom:link href="https://river-z.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mac常用命令行操作</title>
      <link>https://river-z.github.io/posts/blog/mac%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 22 Mar 2023 15:22:37 +0800</pubDate>
      
      <guid>https://river-z.github.io/posts/blog/mac%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</guid>
      <description>快速打开/user目录 commond + shift + G
快速打开该目录下的隐藏文件 commond + shift + .
查看依赖包最新的版本 npm view 包名 version
查看当前依赖版本号 依赖名 -v
快速打开录制视频 shift + commond + 5
设置淘宝镜像 npm config set registry https://registry.npm.taobao.org
权限报错 Error: EACCES: permission denied, mkdir &amp;lsquo;/usr/local/lib/node_modules/create-react-app&amp;rsquo; npm ERR! [Error: EACCES: permission denied, mkdir &amp;lsquo;/usr/local/lib/node_modules/create-react-app&amp;rsquo;] { npm ERR! errno: -13,
sudo chown -R $USER /usr/local/lib/node_modules 可解决
node卸载切换指定版本 (node卸载切换指定版本)[https://blog.csdn.net/mChales_Liu/article/details/111355476] n 管理工具不要乱用！ 可以尝试nvm切换-&amp;gt; nvm list /nvm use/nvm install v12.4.0
eden 项目安装依赖报错 gyp error sudo ln -sf /Library/Developer/CommandLineTools/usr/bin/python3 /Library/Developer/CommandLineTools/usr/bin/python</description>
    </item>
    
    <item>
      <title>react相关</title>
      <link>https://river-z.github.io/posts/blog/react/</link>
      <pubDate>Wed, 22 Mar 2023 15:22:37 +0800</pubDate>
      
      <guid>https://river-z.github.io/posts/blog/react/</guid>
      <description>hooks useState 可以更细粒度地拆分state，讲相关状态都放在一个对象中管理 useEffect return 一个函数，内部对标组件销毁前的时机，对标componentWillUnmount 内部逻辑对标componentDidMount &amp;amp; componentDidUpdate ,传入的数组参数，发生改变时，重新渲染 useMemo 缓存一个变量 memo 缓存一个组件，使用场景：父组件更新state，但子组件不依赖于这些props更新的时候 memo检查props的变更时采用的是标准的js相等判断逻辑：对于基本数据类型执行值相等判断，对于引用数据类型执行引用相等判断。所以当组件props里的值为引用类型时，我们知道父组件的每一次render都会传递新的引用对象，memo进行相等判断时走引用相等逻辑判断，从而每次都会得到false的判断结果，也就不会阻止render过程，造成重复的渲染计算。所以一般可以useMemo&amp;amp;useCallback搭配使用 单纯使用memo只是让组件拥有了 memoized 能力，而真正发挥出组件的 memoized 能力往往需要搭配useCallback 和 useMemo使用。 useCallback 缓存一个回调函数，使用场景：父组件更新state也会引发props传递的函数更新，相当于缓存了一个相同的引用 useContext 子孙组件或更深层次的组件数据共享 外部使用React.createContext 建立一个共享的数据对象，并用该对象的Provider方法包裹住组件（顶层声明Provider组件），value给值，子组件通过useContext(context对象名)/context.Consumer(内部需要用{}包裹一个cb)来消费。 useRef 首先需要明白useMemo和useCallback内置于React的初衷：
保证引用相等 避免昂贵的计算
注意点 涉及到性能优化的hooks内部都有一定的计算开销，不是任何时间都适用的，不要盲目使用，如果依赖的值只是一些简单的基本数据类型值，则不是那么必要 性能优化不是免费的。 它们总是带来成本，并且优化带来的好处并不总是能抵消成本。 react 源码18.6.0 createRoot.render 替代 ReactDom.render (文档参考)[https://www.51cto.com/article/706749.html]
运行npm run eject 之后报错，可以尝试更改启动命令 &amp;ldquo;scripts&amp;rdquo;: { &amp;ldquo;start&amp;rdquo;: &amp;ldquo;node scripts/start.js&amp;rdquo;, &amp;ldquo;build&amp;rdquo;: &amp;ldquo;node scripts/build.js&amp;rdquo;, &amp;ldquo;test&amp;rdquo;: &amp;ldquo;node scriprs/test.js&amp;rdquo; &amp;hellip; }
批处理 setState 在18之前在异步回调/promise/定时器等里执行的时候会多次render，18+合并了多次执行，可以通过ReactDOM.flushSync函数来手动进行强制同步执行（需要同步执行的函数放在这个函数内） 使用flushSync函数进行同步更新后，如果想要获取最新的state，需要在函数体外获取 Concurrent Mode (并发模式) CM 本身并不是一个功能，而是一个底层设计，它使 React 能够同时准备多个版本的 UI。 startTransition 默认情况下都是紧急的更新，但是我们可以通过这个api来指定哪些更新是非紧急的。 紧急更新(Urgent updates)：比如打字、点击、拖动等，需要立即响应的行为，如果不立即响应会给人很卡，或者出问题了的感觉。 过渡更新(Transition updates)：将 UI 从一个视图过渡到另一个视图。不需要即时响应，有些延迟是可以接受的。 流式 SSR 可以理解为，服务端返回页面渲染内容可以独立返回，而在之前如果包含了比较耗时的渲染，要等执行完毕之后一起返回（也就是所谓的串行执行，如果其中有一步比较慢，都会影响整体的渲染速度）。 </description>
    </item>
    
    <item>
      <title>Git常用命令</title>
      <link>https://river-z.github.io/posts/blog/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B8%B8%E7%94%A8%E6%8A%A5%E9%94%99%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 22 Mar 2023 15:20:13 +0800</pubDate>
      
      <guid>https://river-z.github.io/posts/blog/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B8%B8%E7%94%A8%E6%8A%A5%E9%94%99%E6%95%B4%E7%90%86/</guid>
      <description>常见报错 git init 之后，直接执行commit报错： nothing added to commit but untracked files present (use &amp;ldquo;git add&amp;rdquo; to track) 执行add 继续报错 error: &amp;lsquo;packages/client_taro/&amp;rsquo; does not have a commit checked out fatal: adding files failed
packages/client_taro/文件夹下有一个初始化的git仓库，常见于本文件是从其他仓库复制过来导致
mac操作查找隐藏文件命令：command + shift + .
常用git 命令 新建仓库关联本地 git 远端创建仓库 demo 本地创建文件夹demo/其他不同的名字都可，建议取名一致。 cd demo -&amp;gt; git init (本地git仓库初始化，以下步骤可以参照git远端仓库提示) git add README.md (可以是需要提交到暂存区的所有改动文件) git commit -m &amp;ldquo;feat: first commit&amp;rdquo; (格式：m后空格，提交type后空格: 空格) git remote add origin https://github.com/Rosemary-z/eden_taro_demo.git （本地关联远端，添加远端仓库源） git push -u origin master (提交本地修改到远端仓库) 本地新建开发分支，关联远端分支 远端仓库新建分支 feat/dev 本地新建分支并关联远端分支 git checkout -b feat/dev origin/feat/dev TE # 更新远程主机origin 整理分支 git push 建立关联之后，可以直接执行该命令上传远端 git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;</description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>https://river-z.github.io/posts/blog/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 22 Mar 2023 15:20:13 +0800</pubDate>
      
      <guid>https://river-z.github.io/posts/blog/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>Linux 基础 Linux基础
常用Linux命令 ps -ef | grep eden-proxy 查看eden-proxy启动的进程 kill -9 pid 杀进程 commond + shift + . 打开隐藏文件夹 mkdir filename 创建文件 code 文件路径/文件名 用vscode打开文件 Linux 体系结构 用户空间 应用程序应用于用户空间 内核空间 硬件与软件之间的中间层 资源管理程序 提供一组面向系统的命令 linux 内核 命令解释器 文件系统 linux 应用程序 进程管理 进程是正在执行的一个程序或命令 有自己的地址空间，占用一定的系统资源 一个cpu核同一时间只能运行一个进程 进程由它的进程ID(PID)和它父进程的进程ID(PPID)唯一识别 进程调度 操作系统按照某种策略或规则选择进程占用CPU进行运行的过程 进程状态 R (TASK_RUNNING)，可执行状态 S (TASK_INTERRUPTIBLE)， 可中断的睡眠状态 D (TASK_UNINTERRUPTIBLE)， 不可中断的睡眠状态 T (TASK_STOPPED or TASK_TRACED)， 暂停状态或跟踪状态 Z (TASK_DEAD-EXIT_ZOMBIE)， 退出状态，进程成为僵尸进程 (TASK_DEAD-EXIT_DEAD)，退出状态， 进程即将被销毁 文件系统 Linux文件系统是采用树状的结构目录 虚拟文件系统（VFS） 对应用层提供一个标准的文件操作接口 对文件系统提供一个标准的文件接入接口 查看文件系统类型 进程调度原则 一个CPU核同一时间只能运行一个进程 每个进程有近乎相等的执行时间 对于逻辑CPU而言进程调度使用轮询的方式执行，当轮询完成则回到第一个进程反复进程执行消耗时间和进程量成正比 </description>
    </item>
    
  </channel>
</rss>
